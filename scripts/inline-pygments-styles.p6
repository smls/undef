#!/usr/bin/env perl6

# Take HTML generated by pygmentize, and convert spans with class attributes to
# tags with inline CSS styles.
# 
# Usage:
#    ./inline-pygments-styles.p6 input.html > output.html
#    cat input.html | ./inline-pygments-styles.p6 > output.html
# 
# Based on the entries of the %span hash, any elements of the form
# '<span ...class="KEY"...>...</span>' will be replaced with elements of the
# form '<span style="color:VALUE">...</span>' or '<VALUE>...</VALUE>' or '...'.
# 
# Unrelated HTML content is not touched, so it should be safe to use this
# script on full documents with embedded pygmentized code, e.g. as generated
# by https://github.com/smls/undef/blob/master/scripts/pygmentize-code-tags.p6

my %span = (<c c1 c-Singleline cm cp cs sd gp> X=> '#989898'),  # comment
           (<p w sc>                           X=> Any      ),  # punctuation
           (<k kc kd kp kr gh>                 X=> 'b'      ),  # keyword
           (<l m mf mh mi il mo se si>         X=> '#1D8B38'),  # number
           (<ld s sb s1 s2 sh ss sx>           X=> '#DC7B36'),  # string
           (<ss>                               X=> '#AA6232'),  # adverb key
           (<sr>                               X=> '#7C8513'),  # regex
           (<no ne nv vc vg vi>                X=> '#306F8A'),  # variable
           (<kt nc nn bp ni nl>                X=> '#C7394C'),  # type
           (<n nb py na nf nx>                 X=> '#964D8A'),  # routine
           (<o ow kn nd nt gu>                 X=> Any      );  # operator

#------ Main Code ------#

grammar HtmlWithSpans {
    rule TOP { [ .+? [<.comment> || <span> || <.tag>]*]* }
    rule span { :i
        $<start>=['<span' [ <attr> || <-[>]>]* '>']
        [<span> || <tag> || <comment> || .+?]*?
        $<end>=[$ || '</span>']}
    rule tag { '</'<name> | '<'<name> [ <-[>]>*? <attr> ]* '>'};
    rule attr { <name> '=' [ | $<value>=[<-["'>\s]>+]       # "
                             | \" $<value>=[<-["]>+] \"     # "
                             | \' $<value>=[<-[']>+] \' ] } # '
    token name { <.alpha>\w* }
    token comment { '<!--' .*? '-->' };
}

my $source = slurp;

for HtmlWithSpans.parse($source)<span>.reverse {
    my $class = ~.<attr>.first(*.<name> eq 'class').<value>;
    next unless defined($class) and %span{$class}:exists;
    
    my ($start, $end) = do given %span{$class} {
        when !*.defined { '', '' }
        when /^'#'\w+$/ { "<span style=\"color:$_\">", "</span>" }
        default         { "<$_>", "</$_>" }
    };
    
    substr-rw($source, .<end>.from, .<end>.chars) = $end;
    substr-rw($source, .<start>.from, .<start>.chars) = $start;
}

print $source;
